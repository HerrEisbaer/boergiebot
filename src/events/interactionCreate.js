const { Interaction, GuildMember, EmbedBuilder, ActionRowBuilder, ButtonBuilder, PermissionsBitField, ChannelType } = require("discord.js");

const Delay = (ms) => new Promise((res) => setTimeout(res, ms));

const closingtickets = {};

const ticket√ºbernahmen = {};

module.exports = {
    name: "interactionCreate",
    /**
     * @param { Interaction } interaction
    */
    async execute(interaction) {
	    if (!interaction.isButton()) return;
        switch (interaction.customId) {
            case "openticket":
                // const ticketchannel = await createNewTicket(interaction, interaction.user.username);
                const allMembergeil = await interaction.guild.members.fetch();
                const wehfoundMember = await allMembergeil.find(user => user.id === interaction.user.id);
                const ticketchannel = await createTicketForUser(interaction, wehfoundMember);
                // await ticketchannel.send(interaction.guild.roles.cache.get(process.env.TEAM_ROLE_ID).toString()).then(message => {
                //     message.delete();
                // })
                ticketchannel.send({
                    embeds: [ new EmbedBuilder()
                        .setTitle("Ticket")
                        .setDescription(`Das Team wurde bereits kontaktiert. Sie werden dir in K√ºrze helfen :). Tue dem Support einen Gefallen und nutze die Zeit und beschreibe dein Anliegen hier in diesem Channel, damit wir dir helfen k√∂nnen üòÑ. 
                        \n \n Wenn dein Ticket geschlossen werden kann, klicke unten auf das üîí`)
                        .setColor("Blue")
                    ],
                    components: [ new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('closeticket')
                                .setLabel('Ticket schlie√üen')
                                .setStyle(4)
                                .setEmoji('üîí'),
                        )
                        .addComponents(
                            new ButtonBuilder()
                            .setCustomId("ticket√ºbernehmen")
                            .setLabel("Ticket √ºbernehmen")
                            .setStyle(2)
                            .setEmoji("üéüÔ∏è")
                        )
                    ]
                });
                interaction.reply({ content: `Ein neues Ticket wurde f√ºr dich erstellt, ${ticketchannel.toString()}`, ephemeral: true });
                break;
            case "closeticket":
                interaction.reply({
                    embeds: [ new EmbedBuilder()
                    .setTitle("Ticket")
                    .setDescription("M√∂chtest du **wirklich** das Ticket schlie√üen? Danach kannst du das Ticket **nicht** mehr √∂ffnen.")
                    .setColor("Red")
                ],
                components: [ new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('closeticketja')
                            .setLabel('Ticket wirklich schlie√üen')
                            .setStyle(3)
                            .setEmoji('‚úÖ'),
                    )
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('closeticketnein')
                            .setLabel('Ticket doch nicht schlie√üen')
                            .setStyle(4)
                            .setEmoji('‚úñÔ∏è')
                    )
                ], ephemeral: true });
                break;
            case "closeticketja":
                if (closingtickets[interaction.channelId]) {
                    await interaction.reply({
                        embeds: [
                            new EmbedBuilder()
                                .setTitle("Fehler")
                                .setDescription("Jemand anderes versucht schon das Ticket zu schlie√üen.")
                                .setColor("Red")
                    ], ephemeral: true });
                    return;
                }
                closingtickets[interaction.channelId] = true;
                await interaction.reply({ embeds: [
                    new EmbedBuilder()
                    .setTitle("Ticket geschlossen")
                    .setDescription(`Dieses Ticket wurde von ${interaction.member.toString()} geschlossen. Nun wird das Ticket in 10 Sekunden gel√∂scht.`)
                    .setColor("DarkRed")
                ]});
                const altename = interaction.channel.name;
                await interaction.channel.setName(`closed_${interaction.channel.name}`);
                await Delay(5000);
                const channel = await interaction.guild.channels.cache.get(process.env.TICKET_LOGCHANNEL_ID);
                channel.send({ embeds: [
                    new EmbedBuilder()
                    .setTitle("Ticket Log System")
                    .setDescription(`Das Ticket "${altename}" wurde von ${interaction.member.toString()} gel√∂scht.`)
                    .setColor("DarkRed")
                ]})
                delete closingtickets[interaction.channel.id];
                await interaction.channel.delete();
                break;
            case "closeticketnein":
                await interaction.reply({ embeds: [
                    new EmbedBuilder()
                    .setTitle("Ticket")
                    .setDescription("Das Ticket wird nicht geschlossen.")
                    .setColor("DarkGreen")
                ], ephemeral: true })
                break;
            case "ticket√ºbernehmen":
                if (interaction.channel.parentId !== process.env.TICKET_CAT_ID) {
                    interaction.reply({ embeds:[
                        new EmbedBuilder()
                            .setTitle("Fehler")
                            .setDescription("Du kannst nur in einem Ticket ein Ticket √ºbernehmen")
                            .setColor("Red")
                    ], ephemeral: true });
                    return;
                }
                if (!(interaction.member.roles.cache.some(role => role.id === process.env.TEAM_ROLE_ID))) {
                    interaction.reply({ embeds:[
                        new EmbedBuilder()
                        .setTitle("Fehler")
                        .setDescription("Du kannst als nicht Teamler keine Tickets √ºbernehmen.")
                        .setColor("Red")
                    ], ephemeral: true });
                    return;
                }
                if (ticket√ºbernahmen[interaction.message.channelId]) {
                    interaction.reply({embeds:[
                        new EmbedBuilder()
                        .setTitle("Fehler")
                        .setDescription("Du kannst dieses Ticket nicht √ºbernehmen, da ein anderer es bereits √ºbernommen hat.")
                        .setColor("Red")
                    ], ephemeral:true });
                    return;
                }
                await interaction.reply({ embeds:[
                    new EmbedBuilder()
                    .setTitle("Tickets")
                    .setDescription("Unten bei den Kn√∂pfen kannst du das Ticket freilassen, damit ein anderer als Helfer angezeigt wird. Klicke die Kn√∂pfe nur, wenn du dir sicher bist, dass du nicht weiterhelfen kannst.")
                    .setColor("Red")
                ], components:[
                    new ActionRowBuilder()
                    .setComponents(
                        new ButtonBuilder()
                        .setCustomId("ticketfreigeben")
                        .setLabel("Gebe das Ticket frei.")
                        .setStyle(4)
                        .setEmoji("üóø")
                    )
                ], ephemeral: true })

                await interaction.channel.send({ embeds: [
                    new EmbedBuilder()
                    .setTitle("Tickets")
                    .setDescription(`${interaction.user.toString()} hat nun dein Ticket √ºbernommen und hilft dir in deinem Fall.`)
                    .setColor("Green")
                ]});
                ticket√ºbernahmen[interaction.channelId] = interaction.member.toString();
                break;
            case "ticketfreigeben":
                if (interaction.message.channel.parent != process.env.TICKET_CAT_ID) {
                    await interaction.reply({embeds:[
                        new EmbedBuilder()
                        .setTitle("Fehler")
                        .setDescription("Du kannst nur in einem Ticket ein Ticket freigeben")
                        .setColor("Red")
                    ], ephemeral: true });
                    return;
                }
                if (!(interaction.member.roles.cache.some(role => role.id === process.env.TEAM_ROLE_ID))) {
                    interaction.reply({embeds:[
                        new EmbedBuilder()
                        .setTitle("Fehler")
                        .setDescription("Du kannst als nicht Teamler keine Tickets √ºbernehmen.")
                        .setColor("Red")
                    ], ephemeral: true })
                    return
                }
                if (!ticket√ºbernahmen[interaction.message.channelId]) {
                    await interaction.reply({embeds:[
                        new EmbedBuilder()
                        .setTitle("Fehler")
                        .setDescription("Du kannst dieses Ticket nicht √ºbernehmen, da es noch niemand √ºbernommen hat.")
                        .setColor("Red")
                    ], ephemeral: true });
                    return;
                }
                await interaction.channel.send({ embeds: [
                    new EmbedBuilder()
                    .setTitle("Tickets")
                    .setDescription(`${interaction.member.toString()} hat das Ticket freigegeben.`)
                    .setColor("Blue")
                ]});
                delete ticket√ºbernahmen[interaction.message.channelId];
                await interaction.reply({embeds:[
                    new EmbedBuilder()
                    .setTitle("Tickets")
                    .setDescription("Das Ticket wurde erfolgreich freigegeben.")
                    .setColor("Green")
                ], ephemeral: true });
                break;
            case "openticketforuseryes":
                const notresolvedid = interaction.message.embeds[0].description.replace("M√∂chtest du wirklich ein Ticket f√ºr <@", "").replace("> erstellen?", "");
                const allMember = await interaction.guild.members.fetch();
                const foundMember = await allMember.find(user => user.id === notresolvedid);
                const newticketchannel = await createTicketForUser(interaction, foundMember);
                await newticketchannel.send(foundMember.toString()).then(message => {
                    message.delete();
                })
                await newticketchannel.send({
                    embeds: [ new EmbedBuilder()
                        .setTitle("Ticket")
                        .setDescription(`Das Team wurde bereits kontaktiert. Sie werden dir in K√ºrze helfen :). Tue dem Support einen Gefallen und nutze die Zeit und beschreibe dein Anliegen hier in diesem Channel, damit wir dir helfen k√∂nnen üòÑ. 
                        \n \n Wenn dein Ticket geschlossen werden kann, klicke unten auf das üîí`)
                        .setColor("Blue")
                    ],
                    components: [ new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('closeticket')
                                .setLabel('Ticket schlie√üen')
                                .setStyle(4)
                                .setEmoji('üîí'),
                        )
                        .addComponents(
                            new ButtonBuilder()
                            .setCustomId("ticket√ºbernehmen")
                            .setLabel("Ticket √ºbernehmen")
                            .setStyle(2)
                            .setEmoji("üéüÔ∏è")
                        )
                    ]
                });
                interaction.reply({ content: `Ein neues Ticket wurde f√ºr dich erstellt, ${newticketchannel.toString()}`, ephemeral: true });
                break;
        }
    }
}

/**
 * @param { Interaction } interaction
 * @param { GuildMember } adduser
*/
async function createNewTicket(interaction) {
    const ticketname = `ticket_${interaction.user.username}_${Math.floor(Math.random() * 100001)}`;
    return await interaction.guild.channels.create({
        name: ticketname,
        type: ChannelType.GuildText,
        permissionOverwrites: [
            {
                id: interaction.guild.roles.everyone,
                deny: [ PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory ]
            },
            {
                id: process.env.TEAM_ROLE_ID,
                allow: [ PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory ]
            }
        ],
        parent: process.env.TICKET_CAT_ID
    });
}

/**
 * @param { Interaction } interaction
 * @param { GuildMember } adduser
*/

async function createTicketForUser(interaction, adduser) {
    const ticketname = `ticket_${adduser.user.username}_${Math.floor(Math.random() * 100001)}`;
    return await interaction.guild.channels.create({
        name: ticketname,
        type: ChannelType.GuildText,
        permissionOverwrites: [
            {
                id: interaction.guild.roles.everyone,
                deny: [ PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory ]
            },
            {
                id: process.env.TEAM_ROLE_ID,
                allow: [ PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory ]
            },
            {
                id: adduser.id,
                allow: [ PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.ReadMessageHistory, PermissionsBitField.Flags.SendMessages ]
            }
        ],
        parent: process.env.TICKET_CAT_ID
    });
}